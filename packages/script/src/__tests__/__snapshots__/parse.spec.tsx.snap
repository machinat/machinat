// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse <IF/> parse nested <IF/> 1`] = `
Array [
  Object {
    "branches": Array [
      Object {
        "body": Array [
          Object {
            "getContent": [Function],
            "type": "content",
          },
          Object {
            "branches": Array [
              Object {
                "body": Array [
                  Object {
                    "getContent": [Function],
                    "type": "content",
                  },
                ],
                "condition": [Function],
              },
            ],
            "fallbackBody": null,
            "type": "conditions",
          },
          Object {
            "getContent": [Function],
            "type": "content",
          },
        ],
        "condition": [Function],
      },
      Object {
        "body": Array [
          Object {
            "getContent": [Function],
            "type": "content",
          },
          Object {
            "branches": Array [
              Object {
                "body": Array [
                  Object {
                    "getContent": [Function],
                    "type": "content",
                  },
                ],
                "condition": [Function],
              },
              Object {
                "body": Array [
                  Object {
                    "getContent": [Function],
                    "type": "content",
                  },
                ],
                "condition": [Function],
              },
            ],
            "fallbackBody": null,
            "type": "conditions",
          },
          Object {
            "getContent": [Function],
            "type": "content",
          },
        ],
        "condition": [Function],
      },
    ],
    "fallbackBody": Array [
      Object {
        "getContent": [Function],
        "type": "content",
      },
      Object {
        "branches": Array [
          Object {
            "body": Array [
              Object {
                "getContent": [Function],
                "type": "content",
              },
            ],
            "condition": [Function],
          },
        ],
        "fallbackBody": Array [
          Object {
            "getContent": [Function],
            "type": "content",
          },
        ],
        "type": "conditions",
      },
      Object {
        "getContent": [Function],
        "type": "content",
      },
    ],
    "type": "conditions",
  },
]
`;

exports[`parse whole script 1`] = `
Array [
  Object {
    "key": "start",
    "type": "label",
  },
  Object {
    "getContent": [Function],
    "type": "content",
  },
  Object {
    "branches": Array [
      Object {
        "body": Array [
          Object {
            "key": "1st",
            "type": "label",
          },
          Object {
            "body": Array [
              Object {
                "getContent": [Function],
                "type": "content",
              },
              Object {
                "key": "ask_1",
                "setVars": [Function],
                "type": "prompt",
              },
            ],
            "condition": [Function],
            "type": "while",
          },
        ],
        "condition": [Function],
      },
      Object {
        "body": Array [
          Object {
            "getContent": [Function],
            "type": "content",
          },
          Object {
            "branches": Array [
              Object {
                "body": Array [
                  Object {
                    "getContent": [Function],
                    "type": "content",
                  },
                  Object {
                    "key": "ask_2",
                    "setVars": [Function],
                    "type": "prompt",
                  },
                ],
                "condition": [Function],
              },
            ],
            "fallbackBody": Array [
              Object {
                "getContent": [Function],
                "type": "content",
              },
            ],
            "type": "conditions",
          },
        ],
        "condition": [Function],
      },
    ],
    "fallbackBody": Array [
      Object {
        "getContent": [Function],
        "type": "content",
      },
      Object {
        "goto": "bar",
        "key": "call_1",
        "script": Object {
          "$$typeof": Symbol(lib.script.machinat),
          "commands": Array [
            Object {
              "getContent": [Function],
              "type": "content",
            },
            Object {
              "key": "ask",
              "setVars": [Function],
              "type": "prompt",
            },
          ],
          "initVars": [Function],
          "name": "AnotherScript",
          "stopPointIndex": Map {
            "foo" => 3,
            "bar" => 8,
          },
        },
        "setVars": [Function],
        "type": "call",
        "withParams": [Function],
      },
    ],
    "type": "conditions",
  },
  Object {
    "setVars": [Function],
    "type": "effect",
    "yieldValue": undefined,
  },
  Object {
    "key": "2nd",
    "type": "label",
  },
  Object {
    "getContent": [Function],
    "type": "content",
  },
  Object {
    "setVars": undefined,
    "type": "effect",
    "yieldValue": [Function],
  },
  Object {
    "key": "3rd",
    "type": "label",
  },
  Object {
    "getContent": [Function],
    "type": "content",
  },
  Object {
    "body": Array [
      Object {
        "getContent": [Function],
        "type": "content",
      },
      Object {
        "branches": Array [
          Object {
            "body": Array [
              Object {
                "key": "4th",
                "type": "label",
              },
              Object {
                "getContent": [Function],
                "type": "content",
              },
              Object {
                "key": "ask_3",
                "setVars": [Function],
                "type": "prompt",
              },
            ],
            "condition": [Function],
          },
        ],
        "fallbackBody": Array [
          Object {
            "getValue": [Function],
            "type": "return",
          },
        ],
        "type": "conditions",
      },
    ],
    "condition": [Function],
    "type": "while",
  },
  Object {
    "getContent": [Function],
    "type": "content",
  },
  Object {
    "goto": "foo",
    "key": "call_2",
    "script": Object {
      "$$typeof": Symbol(lib.script.machinat),
      "commands": Array [
        Object {
          "getContent": [Function],
          "type": "content",
        },
        Object {
          "key": "ask",
          "setVars": [Function],
          "type": "prompt",
        },
      ],
      "initVars": [Function],
      "name": "AnotherScript",
      "stopPointIndex": Map {
        "foo" => 3,
        "bar" => 8,
      },
    },
    "setVars": undefined,
    "type": "call",
    "withParams": [Function],
  },
  Object {
    "key": "end",
    "type": "label",
  },
  Object {
    "key": "ask_4",
    "setVars": [Function],
    "type": "prompt",
  },
  Object {
    "setVars": [Function],
    "type": "effect",
    "yieldValue": [Function],
  },
  Object {
    "getContent": [Function],
    "type": "content",
  },
]
`;
