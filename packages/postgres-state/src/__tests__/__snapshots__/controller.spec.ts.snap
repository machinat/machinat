// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default table thread state .clear() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table thread state .clear() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table thread state .delete() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table thread state .delete() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .get() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table thread state .get() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .getAll() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table thread state .getAll() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table thread state .keys() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table thread state .keys() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table thread state .set() 1`] = `
"
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table thread state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`default table thread state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`default table thread state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table thread state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table thread state .update() update value 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .clear() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table thread state with scope id .clear() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table thread state with scope id .delete() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table thread state with scope id .delete() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .get() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table thread state with scope id .get() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .getAll() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table thread state with scope id .getAll() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table thread state with scope id .keys() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table thread state with scope id .keys() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table thread state with scope id .set() 1`] = `
"
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table thread state with scope id .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`default table thread state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`default table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table thread state with scope id .update() update value 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table global state .clear() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table global state .clear() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`default table global state .delete() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table global state .delete() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table global state .get() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table global state .get() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table global state .getAll() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table global state .getAll() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`default table global state .keys() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table global state .keys() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`default table global state .set() 1`] = `
"
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table global state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table global state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`default table global state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`default table global state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table global state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table global state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table global state .update() update value 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .clear() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table user state .clear() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table user state .delete() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table user state .delete() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .get() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table user state .get() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .getAll() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table user state .getAll() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table user state .keys() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table user state .keys() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table user state .set() 1`] = `
"
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table user state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`default table user state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`default table user state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table user state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table user state .update() update value 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .clear() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table user state with scope id .clear() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table user state with scope id .delete() 1`] = `
"
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table user state with scope id .delete() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .get() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`default table user state with scope id .get() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .getAll() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table user state with scope id .getAll() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table user state with scope id .keys() 1`] = `
"
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`default table user state with scope id .keys() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table user state with scope id .set() 1`] = `
"
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table user state with scope id .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`default table user state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`default table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"SociablyStates\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"SociablyStates\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table user state with scope id .update() update value 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .clear() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table thread state .clear() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table thread state .delete() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table thread state .delete() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .get() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table thread state .get() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .getAll() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table thread state .getAll() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table thread state .keys() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table thread state .keys() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table thread state .set() 1`] = `
"
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table thread state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified schema & table thread state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state .update() update value 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .clear() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table thread state with scope id .clear() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table thread state with scope id .delete() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table thread state with scope id .delete() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .get() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table thread state with scope id .get() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .getAll() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table thread state with scope id .getAll() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table thread state with scope id .keys() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table thread state with scope id .keys() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table thread state with scope id .set() 1`] = `
"
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table thread state with scope id .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified schema & table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state with scope id .update() update value 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .clear() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table global state .clear() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table global state .delete() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table global state .delete() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .get() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table global state .get() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .getAll() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table global state .getAll() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table global state .keys() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table global state .keys() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table global state .set() 1`] = `
"
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table global state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table global state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified schema & table global state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table global state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table global state .update() update value 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .clear() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table user state .clear() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table user state .delete() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table user state .delete() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .get() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table user state .get() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .getAll() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table user state .getAll() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table user state .keys() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table user state .keys() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table user state .set() 1`] = `
"
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table user state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified schema & table user state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state .update() update value 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .clear() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table user state with scope id .clear() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table user state with scope id .delete() 1`] = `
"
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table user state with scope id .delete() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .get() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified schema & table user state with scope id .get() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .getAll() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table user state with scope id .getAll() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table user state with scope id .keys() 1`] = `
"
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified schema & table user state with scope id .keys() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table user state with scope id .set() 1`] = `
"
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table user state with scope id .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified schema & table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_schema\\".\\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_schema\\".\\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state with scope id .update() update value 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state .clear() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table thread state .clear() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table thread state .delete() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table thread state .delete() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .get() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table thread state .get() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .getAll() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table thread state .getAll() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table thread state .keys() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table thread state .keys() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table thread state .set() 1`] = `
"
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table thread state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified table thread state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state .update() update value 2`] = `
Array [
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .clear() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table thread state with scope id .clear() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table thread state with scope id .delete() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table thread state with scope id .delete() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .get() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table thread state with scope id .get() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .getAll() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table thread state with scope id .getAll() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table thread state with scope id .keys() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table thread state with scope id .keys() 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table thread state with scope id .set() 1`] = `
"
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table thread state with scope id .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state with scope id .update() update value 2`] = `
Array [
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "thread",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "thread",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "thread",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "thread",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "thread",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table global state .clear() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table global state .clear() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`specified table global state .delete() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table global state .delete() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table global state .get() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table global state .get() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table global state .getAll() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table global state .getAll() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`specified table global state .keys() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table global state .keys() 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
  ],
]
`;

exports[`specified table global state .set() 1`] = `
"
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table global state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table global state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified table global state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified table global state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table global state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table global state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table global state .update() update value 2`] = `
Array [
  Array [
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "global",
    "",
    "",
    "foo",
    "key1",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "global",
    "",
    "",
    "foo",
    "key2",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "global",
    "",
    "",
    "foo",
    "key3",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "global",
    "",
    "",
    "foo",
    "key4",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "global",
    "",
    "",
    "foo",
    "key5",
  ],
  Array [
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "global",
    "",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .clear() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table user state .clear() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table user state .delete() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table user state .delete() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .get() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table user state .get() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .getAll() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table user state .getAll() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table user state .keys() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table user state .keys() 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table user state .set() 1`] = `
"
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table user state .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified table user state .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified table user state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table user state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table user state .update() update value 2`] = `
Array [
  Array [
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "",
    "foo",
    "key1",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "",
    "foo",
    "key2",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "",
    "foo",
    "key3",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "",
    "foo",
    "key4",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "",
    "foo",
    "key5",
  ],
  Array [
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .clear() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table user state with scope id .clear() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table user state with scope id .delete() 1`] = `
"
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table user state with scope id .delete() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .get() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      "
`;

exports[`specified table user state with scope id .get() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .getAll() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table user state with scope id .getAll() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table user state with scope id .keys() 1`] = `
"
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4;
      "
`;

exports[`specified table user state with scope id .keys() 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table user state with scope id .set() 1`] = `
"
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table user state with scope id .set() 2`] = `
Array [
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        DELETE FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5;
      ",
  "COMMIT",
]
`;

exports[`specified table user state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .update() update value 1`] = `
Array [
  "BEGIN",
  "
        SELECT * FROM \\"my_table\\"
        WHERE \\"type\\" = $1 AND \\"platform\\" = $2 AND \\"scopeId\\" = $3 AND \\"id\\" = $4 AND \\"key\\" = $5 FOR UPDATE;
      ",
  "
        INSERT INTO \\"my_table\\" (
          \\"data\\",
          \\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\"
        )
        VALUES (
          $1,
          $2, $3, $4, $5, $6
        )
        ON CONFLICT (\\"type\\", \\"platform\\", \\"scopeId\\", \\"id\\", \\"key\\") DO UPDATE
        SET
          \\"data\\" = EXCLUDED.\\"data\\",
          \\"updatedAt\\" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table user state with scope id .update() update value 2`] = `
Array [
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    Object {
      "value": "foo",
    },
    "user",
    "test",
    "foo",
    "1",
    "key1",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    Object {
      "value": "bar",
    },
    "user",
    "test",
    "foo",
    "1",
    "key2",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    Object {
      "value": 456,
    },
    "user",
    "test",
    "foo",
    "1",
    "key3",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    Object {
      "value": Object {
        "bar": "bae",
      },
    },
    "user",
    "test",
    "foo",
    "1",
    "key4",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    Object {
      "value": Array [
        1,
        2,
        3,
      ],
    },
    "user",
    "test",
    "foo",
    "1",
    "key5",
  ],
  Array [
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
  Array [
    Object {
      "value": Object {},
    },
    "user",
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;
