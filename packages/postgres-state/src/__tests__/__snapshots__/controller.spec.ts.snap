// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`default table channel state .clear() 1`] = `
"
        DELETE FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table channel state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table channel state .delete() 1`] = `
"
        DELETE FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table channel state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table channel state .get() 1`] = `
"
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table channel state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table channel state .getAll() 1`] = `
"
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table channel state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table channel state .keys() 1`] = `
"
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table channel state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table channel state .set() 1`] = `
"
        INSERT INTO "SociablyChannelStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table channel state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table channel state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`default table channel state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`default table channel state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table channel state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table channel state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyChannelStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table channel state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table channel state with scope id .clear() 1`] = `
"
        DELETE FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table channel state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table channel state with scope id .delete() 1`] = `
"
        DELETE FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table channel state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table channel state with scope id .get() 1`] = `
"
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table channel state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table channel state with scope id .getAll() 1`] = `
"
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table channel state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table channel state with scope id .keys() 1`] = `
"
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table channel state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table channel state with scope id .set() 1`] = `
"
        INSERT INTO "SociablyChannelStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table channel state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table channel state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`default table channel state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`default table channel state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table channel state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table channel state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyChannelStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyChannelStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table channel state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table global state .clear() 1`] = `
"
        DELETE FROM "SociablyGlobalStates"
        WHERE "id" = $1;
      "
`;

exports[`default table global state .clear() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`default table global state .delete() 1`] = `
"
        DELETE FROM "SociablyGlobalStates"
        WHERE "id" = $1 AND "key" = $2;
      "
`;

exports[`default table global state .delete() 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`default table global state .get() 1`] = `
"
        SELECT * FROM "SociablyGlobalStates"
        WHERE "id" = $1 AND "key" = $2;
      "
`;

exports[`default table global state .get() 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`default table global state .getAll() 1`] = `
"
        SELECT * FROM "SociablyGlobalStates"
        WHERE "id" = $1;
      "
`;

exports[`default table global state .getAll() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`default table global state .keys() 1`] = `
"
        SELECT * FROM "SociablyGlobalStates"
        WHERE "id" = $1;
      "
`;

exports[`default table global state .keys() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`default table global state .set() 1`] = `
"
        INSERT INTO "SociablyGlobalStates" (
          "data",
          "id", "key"
        )
        VALUES (
          $1,
          $2, $3
        )
        ON CONFLICT ("id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table global state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`default table global state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyGlobalStates"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyGlobalStates"
        WHERE "id" = $1 AND "key" = $2;
      ",
  "COMMIT",
]
`;

exports[`default table global state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
]
`;

exports[`default table global state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyGlobalStates"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table global state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`default table global state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyGlobalStates"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyGlobalStates" (
          "data",
          "id", "key"
        )
        VALUES (
          $1,
          $2, $3
        )
        ON CONFLICT ("id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table global state .update() update value 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`default table thread state .clear() 1`] = `
"
        DELETE FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table thread state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table thread state .delete() 1`] = `
"
        DELETE FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table thread state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .get() 1`] = `
"
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table thread state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .getAll() 1`] = `
"
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table thread state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table thread state .keys() 1`] = `
"
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table thread state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table thread state .set() 1`] = `
"
        INSERT INTO "SociablyThreadStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table thread state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`default table thread state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`default table thread state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table thread state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyThreadStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table thread state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .clear() 1`] = `
"
        DELETE FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table thread state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table thread state with scope id .delete() 1`] = `
"
        DELETE FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table thread state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .get() 1`] = `
"
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table thread state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .getAll() 1`] = `
"
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table thread state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table thread state with scope id .keys() 1`] = `
"
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table thread state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table thread state with scope id .set() 1`] = `
"
        INSERT INTO "SociablyThreadStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table thread state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`default table thread state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`default table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table thread state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyThreadStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyThreadStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table thread state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state .clear() 1`] = `
"
        DELETE FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table user state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table user state .delete() 1`] = `
"
        DELETE FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table user state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .get() 1`] = `
"
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table user state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .getAll() 1`] = `
"
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table user state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table user state .keys() 1`] = `
"
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table user state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`default table user state .set() 1`] = `
"
        INSERT INTO "SociablyUserStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table user state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`default table user state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`default table user state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table user state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyUserStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table user state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .clear() 1`] = `
"
        DELETE FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table user state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table user state with scope id .delete() 1`] = `
"
        DELETE FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table user state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .get() 1`] = `
"
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`default table user state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .getAll() 1`] = `
"
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table user state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table user state with scope id .keys() 1`] = `
"
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`default table user state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`default table user state with scope id .set() 1`] = `
"
        INSERT INTO "SociablyUserStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`default table user state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`default table user state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`default table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`default table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`default table user state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "SociablyUserStates"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "SociablyUserStates" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`default table user state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table channel state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table channel state .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table channel state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table channel state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table channel state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table channel state .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table channel state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table channel state .set() 1`] = `
"
        INSERT INTO "my_schema"."my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table channel state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table channel state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified schema & table channel state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table channel state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table channel state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state with scope id .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table channel state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table channel state with scope id .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table channel state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state with scope id .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table channel state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state with scope id .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table channel state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table channel state with scope id .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table channel state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table channel state with scope id .set() 1`] = `
"
        INSERT INTO "my_schema"."my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table channel state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table channel state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified schema & table channel state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table channel state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table channel state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table channel state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_global_state"
        WHERE "id" = $1;
      "
`;

exports[`specified schema & table global state .clear() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`specified schema & table global state .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_global_state"
        WHERE "id" = $1 AND "key" = $2;
      "
`;

exports[`specified schema & table global state .delete() 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_global_state"
        WHERE "id" = $1 AND "key" = $2;
      "
`;

exports[`specified schema & table global state .get() 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_global_state"
        WHERE "id" = $1;
      "
`;

exports[`specified schema & table global state .getAll() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`specified schema & table global state .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_global_state"
        WHERE "id" = $1;
      "
`;

exports[`specified schema & table global state .keys() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`specified schema & table global state .set() 1`] = `
"
        INSERT INTO "my_schema"."my_global_state" (
          "data",
          "id", "key"
        )
        VALUES (
          $1,
          $2, $3
        )
        ON CONFLICT ("id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table global state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_global_state"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_global_state"
        WHERE "id" = $1 AND "key" = $2;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table global state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
]
`;

exports[`specified schema & table global state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_global_state"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table global state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified schema & table global state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_global_state"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_global_state" (
          "data",
          "id", "key"
        )
        VALUES (
          $1,
          $2, $3
        )
        ON CONFLICT ("id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table global state .update() update value 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table thread state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table thread state .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table thread state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table thread state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table thread state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table thread state .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table thread state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table thread state .set() 1`] = `
"
        INSERT INTO "my_schema"."my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table thread state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified schema & table thread state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table thread state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table thread state with scope id .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table thread state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table thread state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table thread state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table thread state with scope id .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table thread state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table thread state with scope id .set() 1`] = `
"
        INSERT INTO "my_schema"."my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table thread state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified schema & table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table thread state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table thread state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table user state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table user state .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table user state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table user state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table user state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table user state .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table user state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified schema & table user state .set() 1`] = `
"
        INSERT INTO "my_schema"."my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table user state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified schema & table user state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .clear() 1`] = `
"
        DELETE FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table user state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table user state with scope id .delete() 1`] = `
"
        DELETE FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table user state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .get() 1`] = `
"
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified schema & table user state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .getAll() 1`] = `
"
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table user state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table user state with scope id .keys() 1`] = `
"
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified schema & table user state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified schema & table user state with scope id .set() 1`] = `
"
        INSERT INTO "my_schema"."my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified schema & table user state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified schema & table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified schema & table user state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_schema"."my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_schema"."my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified schema & table user state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table channel state .clear() 1`] = `
"
        DELETE FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table channel state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table channel state .delete() 1`] = `
"
        DELETE FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table channel state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table channel state .get() 1`] = `
"
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table channel state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table channel state .getAll() 1`] = `
"
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table channel state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table channel state .keys() 1`] = `
"
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table channel state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table channel state .set() 1`] = `
"
        INSERT INTO "my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table channel state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table channel state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified table channel state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified table channel state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table channel state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table channel state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table channel state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table channel state with scope id .clear() 1`] = `
"
        DELETE FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table channel state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table channel state with scope id .delete() 1`] = `
"
        DELETE FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table channel state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table channel state with scope id .get() 1`] = `
"
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table channel state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table channel state with scope id .getAll() 1`] = `
"
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table channel state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table channel state with scope id .keys() 1`] = `
"
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table channel state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table channel state with scope id .set() 1`] = `
"
        INSERT INTO "my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table channel state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table channel state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified table channel state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified table channel state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table channel state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table channel state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_channel_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_channel_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table channel state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table global state .clear() 1`] = `
"
        DELETE FROM "my_global_state"
        WHERE "id" = $1;
      "
`;

exports[`specified table global state .clear() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`specified table global state .delete() 1`] = `
"
        DELETE FROM "my_global_state"
        WHERE "id" = $1 AND "key" = $2;
      "
`;

exports[`specified table global state .delete() 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified table global state .get() 1`] = `
"
        SELECT * FROM "my_global_state"
        WHERE "id" = $1 AND "key" = $2;
      "
`;

exports[`specified table global state .get() 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified table global state .getAll() 1`] = `
"
        SELECT * FROM "my_global_state"
        WHERE "id" = $1;
      "
`;

exports[`specified table global state .getAll() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`specified table global state .keys() 1`] = `
"
        SELECT * FROM "my_global_state"
        WHERE "id" = $1;
      "
`;

exports[`specified table global state .keys() 2`] = `
[
  [
    "MY_SUPER_STATE",
  ],
]
`;

exports[`specified table global state .set() 1`] = `
"
        INSERT INTO "my_global_state" (
          "data",
          "id", "key"
        )
        VALUES (
          $1,
          $2, $3
        )
        ON CONFLICT ("id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table global state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified table global state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_global_state"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "
        DELETE FROM "my_global_state"
        WHERE "id" = $1 AND "key" = $2;
      ",
  "COMMIT",
]
`;

exports[`specified table global state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
]
`;

exports[`specified table global state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_global_state"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table global state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified table global state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_global_state"
        WHERE "id" = $1 AND "key" = $2 FOR UPDATE;
      ",
  "
        INSERT INTO "my_global_state" (
          "data",
          "id", "key"
        )
        VALUES (
          $1,
          $2, $3
        )
        ON CONFLICT ("id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table global state .update() update value 2`] = `
[
  [
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "MY_SUPER_STATE",
    "key1",
  ],
  [
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "MY_SUPER_STATE",
    "key2",
  ],
  [
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "MY_SUPER_STATE",
    "key3",
  ],
  [
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "MY_SUPER_STATE",
    "key4",
  ],
  [
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "MY_SUPER_STATE",
    "key5",
  ],
  [
    "MY_SUPER_STATE",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "MY_SUPER_STATE",
    "key6",
  ],
]
`;

exports[`specified table thread state .clear() 1`] = `
"
        DELETE FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table thread state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table thread state .delete() 1`] = `
"
        DELETE FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table thread state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .get() 1`] = `
"
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table thread state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .getAll() 1`] = `
"
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table thread state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table thread state .keys() 1`] = `
"
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table thread state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table thread state .set() 1`] = `
"
        INSERT INTO "my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table thread state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified table thread state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .clear() 1`] = `
"
        DELETE FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table thread state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table thread state with scope id .delete() 1`] = `
"
        DELETE FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table thread state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .get() 1`] = `
"
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table thread state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .getAll() 1`] = `
"
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table thread state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table thread state with scope id .keys() 1`] = `
"
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table thread state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table thread state with scope id .set() 1`] = `
"
        INSERT INTO "my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table thread state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table thread state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_thread_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_thread_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table thread state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state .clear() 1`] = `
"
        DELETE FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table user state .clear() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table user state .delete() 1`] = `
"
        DELETE FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table user state .delete() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .get() 1`] = `
"
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table user state .get() 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .getAll() 1`] = `
"
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table user state .getAll() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table user state .keys() 1`] = `
"
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table user state .keys() 2`] = `
[
  [
    "test",
    "",
    "foo",
  ],
]
`;

exports[`specified table user state .set() 1`] = `
"
        INSERT INTO "my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table user state .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified table user state .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
]
`;

exports[`specified table user state .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table user state .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table user state .update() update value 2`] = `
[
  [
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "",
    "foo",
    "key1",
  ],
  [
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "",
    "foo",
    "key2",
  ],
  [
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "",
    "foo",
    "key3",
  ],
  [
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "",
    "foo",
    "key4",
  ],
  [
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "",
    "foo",
    "key5",
  ],
  [
    "test",
    "",
    "foo",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "",
    "foo",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .clear() 1`] = `
"
        DELETE FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table user state with scope id .clear() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table user state with scope id .delete() 1`] = `
"
        DELETE FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table user state with scope id .delete() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .get() 1`] = `
"
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      "
`;

exports[`specified table user state with scope id .get() 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .getAll() 1`] = `
"
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table user state with scope id .getAll() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table user state with scope id .keys() 1`] = `
"
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3;
      "
`;

exports[`specified table user state with scope id .keys() 2`] = `
[
  [
    "test",
    "foo",
    "1",
  ],
]
`;

exports[`specified table user state with scope id .set() 1`] = `
"
        INSERT INTO "my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      "
`;

exports[`specified table user state with scope id .set() 2`] = `
[
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .update() delete entity if updater returns \`undefined\` 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        DELETE FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4;
      ",
  "COMMIT",
]
`;

exports[`specified table user state with scope id .update() delete entity if updater returns \`undefined\` 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
]
`;

exports[`specified table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "COMMIT",
]
`;

exports[`specified table user state with scope id .update() make no change if the new value is the same as old value by shallow comparison 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;

exports[`specified table user state with scope id .update() update value 1`] = `
[
  "BEGIN",
  "
        SELECT * FROM "my_user_state"
        WHERE "platform" = $1 AND "scopeId" = $2 AND "id" = $3 AND "key" = $4 FOR UPDATE;
      ",
  "
        INSERT INTO "my_user_state" (
          "data",
          "platform", "scopeId", "id", "key"
        )
        VALUES (
          $1,
          $2, $3, $4, $5
        )
        ON CONFLICT ("platform", "scopeId", "id", "key") DO UPDATE
        SET
          "data" = EXCLUDED."data",
          "updatedAt" = current_timestamp
        RETURNING (xmax = 0) AS inserted;
      ",
  "COMMIT",
]
`;

exports[`specified table user state with scope id .update() update value 2`] = `
[
  [
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    {
      "value": "foo",
    },
    "test",
    "foo",
    "1",
    "key1",
  ],
  [
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    {
      "value": "bar",
    },
    "test",
    "foo",
    "1",
    "key2",
  ],
  [
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    {
      "value": 456,
    },
    "test",
    "foo",
    "1",
    "key3",
  ],
  [
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    {
      "value": {
        "bar": "bae",
      },
    },
    "test",
    "foo",
    "1",
    "key4",
  ],
  [
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    {
      "value": [
        1,
        2,
        3,
      ],
    },
    "test",
    "foo",
    "1",
    "key5",
  ],
  [
    "test",
    "foo",
    "1",
    "key6",
  ],
  [
    {
      "value": {},
    },
    "test",
    "foo",
    "1",
    "key6",
  ],
]
`;
